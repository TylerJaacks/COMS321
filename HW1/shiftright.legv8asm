Main:
    // int *addr = 0x00000;
    ADDI X19, XZR, #0
    // int size = 4;
    ADDI X20, XZR, #4
    // int pos = 1;
    ADDI X21, XZR, #1
    // int final = 4;
    ADDI X22, XZR, #4

    // a[0] = 5;
    ADDI X9, XZR, #5
    STUR X9, [X19, #0]
    // a[1] = 4;
    ADDI X9, XZR, #4
    STUR X9, [X19, #8]
    // a[2] = 3;
    ADDI X9, XZR, #3
    STUR X9, [X19, #16]
    // a[3] = 2; 
    ADDI X9, XZR, #2
    STUR X9, [X19, #24]

    // ShiftRight(addr, pos, final)
    B ShiftRight
// X19 -> Array Starting Address.
// X20 -> Size of Array.
// X21 -> Position of the Item.
// X22 -> Final Position.
//
// ShiftRight(addr, pos, final):
//  for i from final - 1 to pos:
//    addr[i + 1] = addr[i]
ShiftRight:
// int i = final - 1;
SUBI X23, X22, #1

// X11 = a[final - 1]
LSL X11, X23, #3
LDUR X11, [X11, #0]

// for (i; i > pos; i--)
ShiftRightLoop:
    // XZR = X21 - X23
    // XZR = pos - (final - 1)
    // XZR = 1 - (4 - 1)
    // XZR = -2 => X21 < X23 => pos < (final - 1)
    SUBS XZR, X21, X23
    B.GT Done

    // int q = a[i - 1]
    SUBI X10, X23, #1
    LSL X10, X10, #3
    ADD X10, X19, X10

    LDUR X10, [X10, #0]

    // a[i] = q
    LSL X12, X23, #3
    ADD X12, X19, X12
    STUR X10, [X12, #0]

    // X10 = i * 8
    // LSL X10, X23, #3
    // X10 = X19 + X10
    // ADD X10, X19, X10

    // // int tmp = a[i];
    // LDUR X9, [X10, #0]
    // // a[i + 1] = tmp
    // STUR X9, [X10, #8]

    // i--;
    SUBI X23, X23, #1

    B ShiftRightLoop

Done:
    // a[0] = X11
    STUR X11, [X19, #0]
    DUMP
